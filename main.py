import pandas as pd
from full_pipline_positive import full_pipline as full_pipline_positive
from full_pipline_negative import full_pipline as full_pipline_negative
import pickle
from consts.global_consts import list_of_features_for_web as features

def load_model(org_name):
    with open(org_name, 'rb') as f:
        model = pickle.load(f)
    return model

def extract_features(miRNA=None, mRNA=None, site=None):
    columns = ['key', 'paper name', 'organism', 'miRNA ID', 'miRNA sequence', 'site', 'region', 'valid_row',
                        'full_mrna', 'Gene_ID', 'region count']
    values = [None] * len(columns)
    values[4] = miRNA
    values[5] = site
    values[8] = mRNA
    dataset = pd.DataFrame([values], columns = columns)

    if site != None:
        result_df = full_pipline_positive(dataset)
    else:
        result_df = full_pipline_negative(dataset)
        result_df.drop('site_x', axis=1,inplace=True)

    return result_df


def extract_features_from_sequences(df):

    if df['site'].iloc[0] != None:

        result_df = full_pipline_positive(df)
    else:
        result_df = full_pipline_negative(df)
        result_df.drop('site_x', axis=1,inplace=True)

    return result_df
    # if input_details[5] != None:
    #     res = full_pipline_positive(input_details)
    # else:
    #     res = full_pipline_negative(input_details,"to_delete")
    # return res
    #
    # columns = ['key', 'paper name', 'organism', 'miRNA ID', 'miRNA sequence', 'site', 'region', 'valid_row',
    #            'full_mrna', 'Gene_ID', 'region count']
    # values = [None] * len(columns)
    # values[4] = miRNA
    # values[5] = site
    # values[8] = mRNA
    # dataset = pd.DataFrame([values], columns=columns)
    #
    # if site != None:
    #     result_df = full_pipline_positive(dataset)
    # else:
    #     result_df = full_pipline_negative(dataset)
    #     result_df.drop('site_x', axis=1, inplace=True)
    # pass
    #
    # return result_df


def get_prediction(seq_features,org_name):
    model = load_model(org_name)
    columns_to_keep = list(set(seq_features.columns) & set(features))
    seq_features = seq_features[columns_to_keep]
    pred = model.predict(seq_features)
    return pred


def filter_columns(seq_features):


    features_to_remove = ['miRNA ID', 'miRNA sequence', 'Gene_ID', 'new_key', 'MiRBase ID',
                          'Node of origin (locus)', 'Node of origin (family)', 'Family Age_Group',
                          'Family Age', 'Locus Age', 'seed_family', 'site', 'region', 'paper region',
                          'sequence', 'Gene_name', 'mrna_bulge', 'mrna_inter', 'mir_inter',
                          'mir_bulge', 'duplex_method'
                          ]

    # removing features
    features_to_remove = list(set(seq_features.columns).intersection(features_to_remove))
    seq_features = seq_features.drop(columns=features_to_remove)

    # Remove datatypes that are not numeric
    seq_features = seq_features.select_dtypes(include=['float64', 'int64'])

    seq_features.drop(['index', 'key'], axis=1)
    return seq_features


def predict_sequences(miRNA_seq=None, mRNA_seq=None, site_seq=None,org_name="Human"):

    seq_features = extract_features(miRNA_seq, mRNA_seq, site_seq)
    prediction = get_prediction(seq_features, org_name)
    return prediction
    # columns = ['key', 'paper name', 'organism', 'miRNA ID', 'miRNA sequence', 'site', 'region', 'valid_row',
    #                     'full_mrna', 'Gene_ID']#, 'region count']
    # values = [None] * len(columns)
    # values[4] = miRNA_seq
    # values[5] = site_seq
    # values[8] = mRNA_seq
    # input_details = pd.DataFrame([values], columns = columns)
    # seq_features = extract_features_from_sequences(input_details)
    # prediction = get_prediction(seq_features,org_name)
    # return prediction


if __name__ == '__main__':
    print(predict_sequences('UGGAGUGUGACAAUGGUGUUUG',
                            'CAAUAGAUGUGAGUUAAACUUUAGGAAAAAGGAUUCCCUUUUUUUAAAAAAAAUCAAUACCUCAAAAGCAGGCUUUGGGACAAGAAAACCCCAAAGUGGCCUGCUUUUCCCAUCCCAGGAGCUCAUUAUCCAGUCUGUGCCAACUGAAGUAGGAGACUGACUGUGAGUGCUGGCUAAAAGCCCUGGGUGGUGAGGCUCACAGUACUGGUUUCCAGGAGGAAGAGCCUUUGUGCAUUUGACUGAGGCCAGUUUCUAUGAAGAGCAAGUAGCUGAGGAGAGGUCGAAUUUACUGCUUUUUCCAGGACAAUUCUGGAAGUAAAGAAAAUGUAAUUCAAGCUGGUUAGCUUAAUUUUGUGCCAUUCUUUAACAUAAGAGUAAGCUCUAUUAUGAAAUACAACUUUAAAAAAUUUUAGCUAUAAAUUAUAUAAAUGAUUUUAAAUUGCUGAGGUUUCCUUAGGCAGCUUAUUUAUUUGUUUACAGUUAGACUAUCUGAGUAAAUGGUUCUUUGUGGACCUAGGCAGUUCCUGACUGUUCCACAUGUAGUACAUUGUACCAAAGUUCUUAAUAAGAAUAUUCCCCACAAUCCUGUUCUCUAAAUGUCAAAUAAAGAUUAUUUUCACUAGAUUCAACUUUACAAAAUUUGUUUUAUAUCUGUUAGAAAAUGUACAGACAUAAGUAUUUUCAGUUGACAAAGCAUCAAACCCAGUUCUGCCUAGUGAUAAGUUUCACCCUAGAGUAUGUAUGUAACGUUUUAGCUUAUCCAUCCUUUCUUGGAGCGCCUCCAUUUCCAUUGAAAGCCAGGCUGGAGCAGGACCCUUUUGGAGUAGUGACUCAGUUGCUUCCAAAGCCCCUGCUAUUGUAUGCAGCGCUGACCUGUACUCUUCUUCCCAGGGGAACUCCUGACGAGCUCUUUUUGCAUAAGGCUGGAAAAAAAACAUAAGUAAUAUCACAAUAUCCAUUCUAAAUAUAAAGAACCUUCCUUUUGGACUGGAGUAAAGCUUACAUGCAAAUUUUAUUCUAGUCAUUGGAUCACAAGGGUAGGAGGAUGCACCCCAAAACCCCUACACAGUCAUCUAGAAAAAUAUGUAAAGGCAUUUUGGUUUAUCAUAGCAAUUCAGAGUGCUACUACCAGUGUCUUAGUUUGUAUGUGGUAUACAACAAGUAUCCUGUCCCAAAGGGCUCCCAAUGAGAAGUGCUGCAUAGUCCAAGCUUACAUGUCUUAUAAACAAGUUCAUAAAUGUAUUUUCUUUUUAUGAGAGUUUGACUAAAACUUAUCAGAAUGUUGUUCUUCAUGAAUUACUACUAUACUAAUUACUAUACUAAUAGUGCUCAAAACAAUAUUUUGAAUAUCCUUAUUGGUGUCAAAUUCUGCCUUUUAAUAAGUAGAUGUGAUCUUCAGUUACUGCCAAAAAUUAUUAGGAGACUCAUUUGAUUAAUAAGGCAAGGAAUCAAACUAAACAUUUAGGAGUAAGUUUCUUUCAUUUUCUUCUGUGGUUCAGUAAAGACUGCAUUUAUAGCAUCACUGGUACAAUAUGUAACUUCCCUUAAAGGUUACUACCAAUAAUUCAAACAUACUGAAAGAAUAUAUUUGAUAUGGUGUAGUCCCACUUCUUAAUUUUAAAAGCAACUACCAUAAAACAGAAUUUUACAUGUCUAGAUCUAUUUGAUUUGAAAUUCAGCAUAAGGCUGGAAACCACACUGGUUUGUUUCGUCAGUAAGUAAAAAGGGCAGAAUUUGCCUUGUUAAAGUUUGGCCCCUAUUGAAAUCAGCCCAUACCUGUAAAGAUGACCUCUUUGCUUCUUCUACAGUCACAUUAGCAAAGGGUUCCCAGAAAAUACCUUUUUCCUGUUUCACACGUUCCACUUUGGCAGCUUCAGUUUCAUCUACAAACCCAGUCUGCCAGGGACCAUGAAAAACCAAGCAAAUAGCAACAUGUUAGCACUCUACUAGAUAUGAAAUGGCCACAUAAUUUAAGUGCUGAGUGUUCAACCAUACUAGGCAAAUUCUGGAAGUCACAUGGACUGAUCUAUAAAUACUCUUAGUAUAAUCUGGAUUAAAUCACUCUACUGUGUUCUUCCUUACAAAAUAGUUAGUUAUAGAGUUGUCUUUGCAGGAAAAAAUGAUAGUCUGCUAACCUUUACUGUAUAAGCUAAGAAACUGGCAACAGCAGUGUAUACACAUGUACUUAAAAUCCAGCUUAGAUGUAAUAUAAGUAGGCCAAGUGUGGUGGCUCAUGCCUCUAAUCCCAGGACUUUGGUGGGAGGAAUGCUUGAGCCCAGGAGUUUGAGGUUAUAGCGAGCUAUGAUCACACCACCACACUCCAAUCUGGGCGACAGAGCGAGACUCUGUCUAAAAAAUAAAGUUCAGUGAGUCAAGUGGGCCCAUUUCACCUAAAAAAAUAUAUAUGUAAUAUAUGUAAAAUAUAUAACGUGCAUCAUUACAUGUAAUAUAUCAAAUAAUUCAGUUUCUCCUGGUAGUCUAAAUUUGUGGUUUAACAGUUCCACUAGUAUUUCAAUUAACUAUUAUUUCCUCACACUAAGUUCCCAAGUAUGCAUAGACAUAGGAACCUUGUGAUUCAAAAUUUUGGUUUUAAUUGUAAAAACAGGUCUUGGCUGCAAAGAGAAUAAAAAAGCCAUGCCAAAAAAAAAAAAAAAAAAAAAAAAAAAAGGGCCCUGAGCUUACCCUGGCUUGGGAGGCUGCCCAAAUAAAAAAAAAAAAAAAAAAAAAAAAAAGCCAUGCCUAAAUUAUACCCAAAAUAUGGUAGUAAACAUCCUCUCAGGCCUACCUAAUUAUGUGAUCAAGUGUAUUUAAUUAUGAUUAUUAAUAGCUUAGGGAUCCUCAUUAGUCAUCUCACUGCCUGGAUAAUCAGUGCUAUUACACCCCAAACUACAGGCAGAGGAACUACAAGUGUCCUUUUUUGAGACAGUCUCACUCUGUCGCUCAGGCUGGAGUGCAGUGGCAUGAUCUUGGCUUACUGCAAUCUCUACCUCCCCAGUUCAAGCAAUUCUCCUGCCUCAGCCUCCCGAGUAGCUGGGACUGCAGGCGCGUACCACCAUGCCCGGCUAAUUUUUGUAUUUUUAGUAGAAACAGGGUUUCCCCAUGUUGGCCAGGCUGGUCUUGAACUCCUGACCUCAUGAUCCACCCACCUUGGCCUCCCAAAGUGCUGGGAUUACAGGCAUGAGCCGCCGCGCCUGGCCCCAAGUGUUUUACUUCUGUGGCCUCAAUUGCUUAGUAAAAGUCGUCAGCACUGUGCUCAGCACUGUGAAAAGUUUAAGCUAAGAAGACACUCAGGUUGGUUACAGUUACAUAAUUUCGGAAAAAAAAAAAUAGGACAAAGAAUAAAACAUGAGCCAUGUAAAGAAAGUACCUUCUCCAGAAAGGAUACAACUUUGUUCUUAGUUUCUUCAGAACUGAGACACUGUGGAACUAUCUCUUCAUGAUUUGUUCCCUAUUAAAAAAUUGAUGAACAAGACCAAUUUUAACAUUUCAACAACUUGCAAAGACAAAUAGAUGAGUUUUAUGAGCUACCUUAACCAAAAAUUCAUUUUAAGUAAGAGUCCCAGAGGAUCCUCAAAGGUGAUAAACUCAUGAUUCCUUCAGGGUCCCUAAGGAUAAUACAAAAUUAACUUCUGUACAAGUGUUGUAAGCUUUAAUUACUUCUGCUGGGUCAUACUAAUGCUUCUGGACUCCCUUAUGAUCAUAGGCAUGACUAUACAGCAAAUGCAGUAAGAGUAAAGGAGCAACCCAUCUUACAGGUUUAGGUUCAUCAGCCUAACCCUUAUGACUGAUAGCACAAAAUGAAAUGUAUUAUCAUUUGACCCAAAAAUACUAUCUGCUGGAAGACUGUGUCUGUGUCUGUCUGUAUCAGUAGGCCUGCUGUGUAUGCCUGUUCUGGUCCUUGUUUAUUCAGAGGACCUUACGAAAUUCACUUCAUUUAUCUAAGCCUCAUUUUGAGAAGCUGUAAAAGAGAUAACGAGUAAUGUACCCUUCAGACAAUUUUCCGAUUGCAAUACAGAAGCAGUUCAAUAAAUGUUUUGGGAUUGUUCUGGAAUAUUUGAAAUAUUAAAAUGGUUUGAAAGUCA',
                            'CAAAUAGCAACAUGUUAGCACUCUA',
                            org_name='first_model.model'))

